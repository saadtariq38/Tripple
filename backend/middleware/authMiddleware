const jwt = require('jsonwebtoken')
const asyncHandler = require('express-async-handler')
const User = require('../models/userModel')
const { generateAccessToken, generateRefreshToken } = require('../helper/tokenHelpers')
// const { tokenList } = require('../controllers/userController')

const protect = asyncHandler(async (req, res, next) => {
    let token
    let decoded
  
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
      try {
        // Get token
        token = req.headers.authorization.split(' ')[1]
  
        // Verify token
        try {
          const decoded = jwt.verify(token, process.env.JWT_ACCESS_SECRET);
          console.log("Valid token: ", decoded);
          // Get user from token ID
          req.user = await User.findById(decoded.id).select('-password');
          
        } catch (err) {
          console.log(err.message)
          if (err.message === 'jwt expired') {
            console.log("Token expireddd");
            return res.status(401).send("Token expired");
          } else if (err.message === 'invalid signature') {
            console.log("Invalid token");
            return res.status(401).send("Invalid token");
          } else {
            next(err);
          }
        }
      } catch (error) {
        console.log(error);
        // return next(error);
      }
    } else {
      const error = new Error("Authorization token not provided");
      error.statusCode = 401;
      return next(error);
    }
  
    if (!token) {
      res.status(401);
      throw new Error("Not authorized, no token");
    }
  
    next();
  });


module.exports = {
    protect,
}
