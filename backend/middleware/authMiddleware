const jwt = require('jsonwebtoken')
const asyncHandler = require('express-async-handler')
const User = require('../models/userModel')
const { generateAccessToken, generateRefreshToken } = require('../helper/tokenHelpers')
// const { tokenList } = require('../controllers/userController')

const protect = asyncHandler(async (req, res, next) => {
    let token
    let decoded

    if(req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
        try {
            //Get token
            token = req.headers.authorization.split(' ')[1]
            
            //Verify token
            try {
                decoded = jwt.verify(token, process.env.JWT_ACCESS_SECRET);
                console.log("Valid token: ", decoded);
            } catch (err) {
                if (err.message === 'jwt expired') {
                    console.log("token expired")
                    res.status(401)
                    throw new Error("token expired sending 401")

                } else if (err.message === 'invalid signature') {
                    console.log("Invalid token");
                } else {
                    console.log("Error: ", err.message);
                }
            }
            //Get user from token ID
            req.user = await User.findById(decoded.id).select('-password')

            next()

        } catch (error) {
            console.log(error)
            res.status(401)
            throw new Error("Not authorized")
        }
    }

    if(!token) {
        res.status(401)
        throw new Error("Not authorized, no token")
    }
})


module.exports = {
    protect,
}
